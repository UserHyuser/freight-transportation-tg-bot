const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const Telegraf = require('telegraf')
const Extra = require('telegraf/extra')
const Markup = require('telegraf/markup')
const Telegram = require('telegraf/telegram')
const Emitter = require('events')


const clientDB = require('./clientdb.js'); // –Æ—Ä–∏—Å—Ç—ã –≤ orders.txt
const orderDB = require('./db.js');
const lawyerDB = require('./lawyerdb.js');

let stateClient = 0; // –ü–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
let stateLawyer = 0;
let stateOrder = 0;

let id =0;
let name = '';
let number = 0;
let gender = '';
let stage = 0;

let emitter = new Emitter;
let eventNameCreatedOrder = 'orderCreated';
//process.env.https_proxy="https://181.177.84.81:9622:YHKDBP:ZebtYz/4"

const bot = new Telegraf("547404020:AAHrcA2sQ2LZeqybl4pe8A7-_r0YYfdgqw4")

bot.on('polling_error', (error) => {
    console.log(error);
    bot.restart();
});
//bot.use(Telegraf.log())

console.log('Bot has been started....');
//bot.sendMessage(672537228, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
//bot.reply('–ó–∞–ø—É—â–µ–Ω',38411994);
bot.catch((err) => {
    console.log('Ooops', err)
})

/*bot.start(ctx => {
    ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∑–¥–µ—Å—å –±–æ—Ç-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫ –≤ –≥—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö'); //–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
})*/
bot.command('start', (ctx) => {

            ctx.reply('–ö—Ç–æ –≤—ã?', Markup
                .keyboard([
                    ['üîç –Æ—Ä–∏—Å—Ç', 'üòé –ö–ª–∏–µ–Ω—Ç'], // Row1 with 2 buttons
                ])
                .oneTime()
                .resize()
                .extra()
            )
        })

bot.command('registration',ctx => {
    lawyerDB.remove({id:ctx.from.id}, {multi:true})
    clientDB.remove({id:ctx.from.id}, {multi:true})
    stateClient = 0;
    stateLawyer = 0;

    ctx.reply('–ö—Ç–æ –≤—ã?', Markup
        .keyboard([
            ['üîç –Æ—Ä–∏—Å—Ç', 'üòé –ö–ª–∏–µ–Ω—Ç'], // Row1 with 2 buttons
        ])
        .oneTime()
        .resize()
        .extra()
    )

})
bot.command('menu',ctx => {                                                         //menu
    lawyerDB.find({id:ctx.from.id},function (err,docs) {

        if (JSON.stringify(docs) !== '[]') {
            ctx.reply('–ú–µ–Ω—é –±–æ—Ç–∞:)', Extra.markup((markup) => {
                return markup.resize()
                    .keyboard([
                        ['–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã'],
                        ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
                        ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ']
                    ])

            }))
        } else {
            ctx.reply('–ö—Ç–æ –≤—ã?', Markup
                .keyboard([
                    ['üîç –Æ—Ä–∏—Å—Ç', 'üòé –ö–ª–∏–µ–Ω—Ç'], // Row1 with 2 buttons
                ])
                .oneTime()
                .resize()
                .extra()
            )
        }

            })

})

bot.hears('üîç –Æ—Ä–∏—Å—Ç', ( ctx ) => {
    lawyerDB.find({id:ctx.from.id},function (err,docs) {
        if (JSON.stringify(docs) === '[]') {
            ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', Markup
                .keyboard([
                    ['üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞'],
                    ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
                ])
                .resize()
                .extra()
            )
        } else {
            ctx.reply('–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ: /registration ' +
                '–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /menu');
        }
})})

bot.hears('üòé –ö–ª–∏–µ–Ω—Ç', (ctx) => {
    clientDB.find({id:ctx.from.id},function (err,docs) {
        if (JSON.stringify(docs) === '[]') {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', Markup
        .keyboard([
            ['üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —é—Ä–∏—Å—Ç–∞'],
            ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
        ])
        .oneTime()
        .resize()
        .extra()
    )} else {
            ctx.reply('–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ /registration:)', Extra.markup((markup) => {
                return markup.resize()
                    .keyboard([
                        ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
                        ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ'],
                        ['–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑']
                    ])

            }))
        }
})})

bot.hears('üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞', (ctx) => {
    if(lawyerDB.findOne({id:ctx.from.id})){
        lawyerDB.remove({id: ctx.from.id}, {multi: true});
    }
    stateLawyer = 1;
    id = ctx.from.id;   // –ó–∞–ø–∏—Å–∞–ª–∏ ID
    //console.log(stateLawyer);
    return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :)', Extra.markup((markup) => {
        return markup.resize()
            .keyboard([
                markup.contactRequestButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä')
            ]).oneTime()
    }))

})
bot.on('contact', ctx => {                                          //–ó–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω
    if (stateLawyer === 1){ // –ù–µ –∑–∞—Ä–µ–≥–∞–Ω
        number = ctx.message.contact.phone_number;
        name = ctx.from.first_name;
        //console.log(ctx.message.contact.phone_number);
        ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?')
        stateLawyer = 2;
    } else if (stateClient === 3){
        clientDB.update({id:ctx.from.id}, {$push:{number:ctx.message.contact.phone_number}}); // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ

        ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, —é—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', Extra.markup((markup) => {
            return markup.resize()
                .keyboard([
                    ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
                    ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ'],
                    ['–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑']
                ])

    }))
        emitter.emit(eventNameCreatedOrder, ctx.from.id);
    } else{
        ctx.reply('–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞');
    }
    /*ctx.reply(stateLawyer + "," + stateClient + "," + stateOrder);
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏—è —é—Ä–∏—Å—Ç–∞, –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–∫–∞–∑–∞: ' + stateLawyer + "," + stateClient + "," + stateOrder);*/
})

bot.hears('üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —é—Ä–∏—Å—Ç–∞', (ctx) => {

     ctx.reply('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å', Markup

            .keyboard([
                ['–î–æ–∫—É–º–µ–Ω—Ç—ã'],
                ['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'],
                ['–î—Ä—É–≥–æ–µ'],
                ['–ó–∞–∫—Ä—ã—Ç—å']
            ]).oneTime()
            .resize()
            .extra())
});

bot.hears(['–î–æ–∫—É–º–µ–Ω—Ç—ã' ,'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' , '–î—Ä—É–≥–æ–µ'],(ctx) =>{
    clientDB.insert({id:ctx.from.id, type:ctx.message.text});
    ctx.reply('–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –¥–ª—è —é—Ä–∏—Å—Ç–∞');
    stateClient = 1;
})
bot.hears('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ', ctx => ctx.reply('–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ: /registration ' +
    '–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /menu'))

bot.on('message', ctx => {
    let city = ''
     if (stateLawyer === 2) { // –ù–µ –∑–∞—Ä–µ–≥–∞–Ω
        ctx.reply('–í–∞—à –ø–æ–ª', Extra.markup((markup) => {
            return markup.resize()
                .keyboard([
                    ['–ú—É–∂—Å–∫–æ–π'],
                    ['–ñ–µ–Ω—Å–∫–∏–π']
                ])

        }))
         city = ctx.message.text;
            //lawyerDB.update({id: id, number: number, name: name, city: ctx.message.text}); // –°–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        stateLawyer = 3; // All ok

    }if (stateLawyer === 3 && (ctx.message.text ==='–ú—É–∂—Å–∫–æ–π'||ctx.message.text ==='–ñ–µ–Ω—Å–∫–∏–π')) { // –ù–µ –∑–∞—Ä–µ–≥–∞–Ω
        ctx.reply('–ö–∞–∫–æ–π —É –≤–∞—Å —Å—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)').then(()=>{
            stateLawyer = 4; // All ok
            gender = ctx.message.text;
        })

        //lawyerDB.update({id: id, number: number, name: name, city: ctx.message.text}); // –°–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã


    }
     if (stateLawyer === 4) { // –ù–µ –∑–∞—Ä–µ–≥–∞–Ω
        ctx.reply('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã :)', Extra.markup((markup) => {
            return markup.resize()
                .keyboard([
                    ['–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã'],
                    ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
                    ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ']
                ])

        }))
        lawyerDB.insert({id: id, number: number, name: name, gender: gender, city:city, stage:ctx.message.text}); // –°–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        stateLawyer = 6; // All ok

    }else if (stateClient === 1) {
        clientDB.update({id: ctx.from.id}, {$push: {trouble: ctx.message.text}})
        ctx.reply('–û—Ç–ª–∏—á–Ω–æ, –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?')
        stateClient = 2;

    } else if (stateClient === 2) {
        clientDB.update({id: ctx.from.id}, {$push: {city: ctx.message.text}})
        ctx.reply('–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –≤–∑—è—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :)', Extra.markup((markup) => {
            return markup.resize()
                .keyboard([
                    markup.contactRequestButton('–û—Ç–æ—Å–ª–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä')
                ])
        }))
        stateClient = 3;
    } else if (ctx.message.text === '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
        ctx.reply('–¢—É—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!')
    } else if (ctx.message.text === '–ó–∞–∫—Ä—ã—Ç—å') {
        ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', Markup
            .keyboard([
                ['üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —é—Ä–∏—Å—Ç–∞'],
                ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            ])
            .oneTime()
            .resize()
            .extra()
        )
    } else if (ctx.message.text === '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑') {
        clientDB.remove({id: ctx.from.id}, {multi: true})
        ctx.reply('–í–∞—à –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω', Markup
            .keyboard([
                ['üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —é—Ä–∏—Å—Ç–∞'],
                ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            ])
            .oneTime()
            .resize()
            .extra()
        )

    }else if (ctx.message.text === '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã') {
        clientDB.find({},function (err,orders) {

            let arrayOfOrders = orders;
            if(JSON.stringify(orders) === '[]') {
                ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
                return
            }
            let tmp = 0;
            ctx.replyWithHTML(`<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>`).then(()=>{
                arrayOfOrders.forEach(element => {
                    tmp++;
                    console.log(element)
                    //ctx.replyWithHTML(``).then(()=>{ // –ë–æ–∂–µ, —á—Ç–æ –∑–∞ –ø–∏–∑–¥–µ—Ü
                        ctx.replyWithHTML(`<b>–ó–∞–∫–∞–∑ ‚Ññ${tmp}</b>
–¢–µ–º–∞: ${element.type}
–û–ø–∏—Å–∞–Ω–∏–µ: ${element.trouble}
–ì–æ—Ä–æ–¥: ${element.city}`,Markup.inlineKeyboard([
                            Markup.callbackButton('–í–∑—è—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑', element.id)
                        ]).extra())

                })
            })

        })
    }
})

    emitter.on(eventNameCreatedOrder, function (data) {                                 //–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        //console.log(data)
        clientDB.findOne({id: data},function (err,orders) {
            //console.log(orders);
            //bot.telegram.sendMessage('384119946', orders)
            lawyerDB.find({}, function (err,lawyers) {
                let arrayOfLawyers = lawyers
                let tmp2 = 0;
                if(JSON.stringify(arrayOfLawyers) === '[]') {
                    console.log('–ù–∞ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–∫–∞ –Ω–µ—Ç —é—Ä–∏—Å—Ç–æ–≤')
                    return
                } else{
                        arrayOfLawyers.forEach(element => {
                            tmp2++;
                            console.log(element)
                            //ctx.replyWithHTML(``).then(()=>{ // –ë–æ–∂–µ, —á—Ç–æ –∑–∞ –ø–∏–∑–¥–µ—Ü
                            bot.telegram.sendMessage(element.id,`<b>–î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>`,{parse_mode:'HTML'}).then(()=>{
                                bot.telegram.sendMessage(element.id,`–¢–µ–º–∞: ${orders.type}
–û–ø–∏—Å–∞–Ω–∏–µ: ${orders.trouble}
–ì–æ—Ä–æ–¥: ${orders.city}`,{
                                    reply_markup: {
                                        inline_keyboard: [[
                                            {
                                                text: `–í–∑—è—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑`,
                                                callback_data: orders.id
                                            }
                                        ]]
                                    }
                                    ,parse_mode:'HTML'})

                        })
                    })
                }
            })
        })
    })



    bot.use((ctx) => {                                                                             //–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
        console.log(ctx.message);
        if(ctx.update.callback_query.id){

                clientDB.findOne({id:parseInt(ctx.update.callback_query.data)}, function (err,data3) {
                    let order = data3
                    console.log(order)
                    if(order===null){
                        ctx.reply('–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
                    } else {
                        //console.log(data3)
                        ctx.reply('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –≤–∞—à. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ª–∏—á–Ω–æ.').then(()=>{
                            ctx.telegram.sendContact(ctx.from.id,data3.number,'–ö–ª–∏–µ–Ω—Ç')
                            lawyerDB.findOne({id:parseInt(ctx.from.id)}, function (err,data4){
                                ctx.replyWithHTML(`<b>–í–∞—à —é—Ä–∏—Å—Ç</b>
–ò–º—è: ${data4.name}
–ì–æ—Ä–æ–¥: ${data4.city}
–ü–æ–ª: ${data4.gender}
–°—Ç–∞–∂: ${data4.stage}`)
                                ctx.telegram.sendContact(data3.id,data4.number,'–í–∞—à —é—Ä–∏—Å—Ç')
                            })
                        })

//
                    }
                })
                clientDB.remove({id:parseInt(ctx.update.callback_query.data)}, {multi:true});



        }


    });



    bot.launch()
